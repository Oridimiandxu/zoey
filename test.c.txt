#include <iostream>
//声明point类
class Point
{public:
	Point(float x=0,float y=0);
	void setPoint(flost,flost);
	float getX()const {return x;}
	float getY()const {return y;}
	friend ostream &operator<<(ostream &,const Point &); //重载运算符"<<"
 protected:
	float x,y;
};

//定义成员函数
Point::Point(float a,float b)
{x =a;y =b;}
void Point::setPoint(float a,float b)
{x =a;y =b;}
//重载运算符<<,使之能输出点的坐标
ostream & operator <<(ostream &output,const Point &p)
{output <<"["<<p.x<<","<<p.y<<"]"<<endl;
	return output;
}
//以上完成了Point类的基本声明
//测试部分
int main()
{
	Point(3.6,5.6);
	cout<<"x="<<p.getX()<<",y="<<p.getY()<<endl;
	p.setPoint(8.5,9.2);
	cout<<"p(new):"<<p<<endl;
}

//声明派生类
class Circle:public Point
{
public:
	Circle(float x=0,float y=0,float r=0);
	void setRadius(float);
	float getRadius()const;
	float area() const;
	friend ostream &operator<<(ostream &,const Circle &);
private:
	float radius;
};
//定义构造函数，对圆心坐标和半径初始化
Circle::Circle(float a,float b,float r):Point(a,b),radius(r){}
//设置半径
void Circle::setRadius(float r)
{radius = r;}
//读取半径
float Circle::getRadius()const{return radius;}
//计算面积
float Circle::area()const
{return 3.14159 *radius*radius;}
//重载运算符<<
ostream &operator<<(ostream &output,const Circle &c)
{output<<"Center =["<<c.x<<","<<c.y<<"],r="<<c.radius<<"c.radius<<",area="<<c.area()<<endl;
return output;
}

int main()
{
	Circle c(3.6,6.4,5.2);
	cout<<"orginal circle:\nx="<<c.getX()<<",y="<<c.getY()<<",r="<<c.getRadius()
	<<",area="<<c.area()<<endl;
	c.setRadius(7.5);
	c.setPoint(5,5);
	cout<<"new circle:\n"<<c;
	Point &pRef =c;
	cout<<"pRef:"<<pRef;
	return 0;
}

//声明Circle的派生类
class Cylinder:public Circle
{
public:
	Cylinder(float x=0,float y=0,float r=0,floath=0);
	void setHeight(float);
	float getHeight()const;
	float area()const;
	float volume()const;
	friend ostream& operator <<(ostream&,const Cylinder&);
protected:
	float height;
};

//定义构造函数
Cylinder::Cylinder(float a,float b,float r,float h):Circle(a,b,r),height(h){}

void Cylinder::setHeight(float h){height =h;}

float Cylinder::getHeight()const{return height;}

float Cylinder::area()const
{
	return 2*Circle::area() +2*3.14159*radius*height;
}
float Cylinder::volume()const
{return Circle::area()*height;}

ostream &operator<<(ostream &output,const Cylinder& cy)
{
	output<<"Center=["<<cy.x<<","<<cy.y<<"],r ="<<cy.radius<<",h="<<cy.height
	<<"\narea ="<<cy.area()<<",volume="<<cy.volume()<<endl;
return output;
}


int main()
{
	Cylinder cy1(3.5,6.4,5.0,10);
	cout<<"\noriginal cylinder:\nx="<<cy1.getX()<<",y="<<cy1.getY()<<",r="
	<<cy1.getRadius()<<",h="<<cy1.getHeight()<<"\narea="<<cy1.area()
	<<".volume="<<cy1.volume()<<endl;
	cy1.setHeight(15);
	cy1.setRadius(7.5);
	cy1.setPoint(5.5);
	cout<<nnew cylinder:\n"<<cy1;
	Point &pRef =cy1;
	cout<<"\npRef as a Point:"<<pRef;
	Circle &cRef = cy1;
	cout<<"\ncRef as a Circle:"<<cRef;
return 0;
}


